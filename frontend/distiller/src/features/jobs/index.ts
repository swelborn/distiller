import {
  createAsyncThunk,
  createSlice,
  createEntityAdapter,
  PayloadAction,
  createSelector,
} from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import {
  getJobs as getJobsAPI,
  getJob as getJobAPI,
} from './api';
import {
  getScanJobs as getScanJobsAPI
} from '../scans/api'
import { Job, IdType, JobsRequestResult } from '../../types';
import { DateTime } from 'luxon';

export const jobsAdapter = createEntityAdapter<Job>();

export interface JobsState
  extends ReturnType<(typeof jobsAdapter)['getInitialState']> {
  status: 'idle' | 'loading' | 'complete';
  totalCount: number;
}

const initialState: JobsState = jobsAdapter.getInitialState({
  status: 'idle',
  totalCount: -1,
});

export const getJobs = createAsyncThunk<
  JobsRequestResult,
  {
    withScans: boolean;
    skip: number;
    limit: number;
  }
>('jobs/fetch', async (_payload, _thunkAPI) => {
  const { withScans, skip, limit } = _payload;
  const result = await getJobsAPI( withScans, skip, limit);

  return result;
});

export const getJob = createAsyncThunk<Job, { id: IdType, withScans: boolean }>(
  'job/fetch',
  async (payload, _thunkAPI) => {
    const { id, withScans } = payload;
    const job = await getJobAPI(id, withScans);

    return job;
  }
);

export const getJobsByScanId = createAsyncThunk<
  Job[],
  {
    scanId: IdType;
  }
>('jobs/fetchByScanId', async (payload, _thunkAPI) => {
  const { scanId } = payload;
  const result = await getScanJobsAPI(scanId);

  return result;
});


export const jobsSlice = createSlice({
  name: 'jobs',
  initialState,
  reducers: {
    setJob(state, action: PayloadAction<Job>) {
      state.totalCount = state.totalCount + 1;
      jobsAdapter.setOne(state, action.payload);
    },
    updateJob(state, action: PayloadAction<Partial<Job>>) {
      const { id, ...changes } = action.payload;
      if (id !== undefined) {
        jobsAdapter.updateOne(state, { id, changes });
      }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getJobs.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getJobs.rejected, (state) => {
        state.status = 'idle';
      })
      .addCase(getJobs.fulfilled, (state, action) => {
        const { totalCount, jobs } = action.payload;
        state.status = 'complete';
        state.totalCount = totalCount;
        jobsAdapter.setAll(state, jobs);
      })
      .addCase(getJob.fulfilled, (state, action) => {
        jobsAdapter.setOne(state, action.payload);
      })
      .addCase(getJobsByScanId.fulfilled, (state, action) => {
        state.status = 'complete';
        jobsAdapter.setAll(state, action.payload);
      });
  },
});

export const jobsSelector = jobsAdapter.getSelectors<RootState>(
  (state) => state.jobs
);

const jobState = (rootState: RootState) => rootState.jobs;
const { selectById, selectAll } = jobsAdapter.getSelectors();
export const jobSelector = (id: IdType) => {
  return createSelector(jobState, (state) => selectById(state, id));
};

export const allJobsSelector = createSelector(
  jobState,
  selectAll
);

export const totalCount = (state: RootState) => state.jobs.totalCount;

export const { setJob, updateJob } = jobsSlice.actions;

export default jobsSlice.reducer;
